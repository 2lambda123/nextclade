#!/usr/bin/env bash

set -euo pipefail

SUCCESS="({ set +x; } 2> /dev/null && echo 'ðŸŸ© Success')"
FAILURE="({ set +x; } 2> /dev/null && echo 'ðŸŸ¥ Failure')"
CANCELLED="({ set +x; } 2> /dev/null && echo 'ðŸŸ¦ Cancelled')"
SUCCESS_OR_FAILURE="&& ${SUCCESS} || ${FAILURE}"
HANDLE_SIGINT="trap \"${CANCELLED}; exit 0\" INT"

function abspath() {
  readlink -m "$1"
}

THIS_DIR=$(
  cd "$(dirname "${BASH_SOURCE[0]}")"
  pwd
)

PROJECT_ROOT_DIR="$(abspath "${THIS_DIR}")"

DOCKER_IMAGE_NAME="nextstrain/nextclade_builder"
DOCKER_IMAGE_NAME_SAFE="${DOCKER_IMAGE_NAME//\//-}"
DOCKER_CONTAINER_NAME="${DOCKER_IMAGE_NAME_SAFE}-$(date +%s)"

USER=user
GROUP=user

EXTENSIONS_TO_WATCH="c,cpp,h,hpp,cx,cxx,txt,json,yaml,yml,py,cmake,sh,cppcheck,clang-tidy,Makefile,env,env.example"

FILES_TO_WATCH="\
-w .clang-tidy \
-w .cppcheck \
-w .env \
-w .env.example \
-w CMakeLists.txt \
-w Dockerfile \
-w Makefile \
-w conanfile.py \
-w config/* \
-w dev \
-w packages/cmake \
-w packages/nextalign/CMakeLists.txt \
-w packages/nextalign/include/nextalign/* \
-w packages/nextalign/src/* \
-w packages/nextalign/tests/* \
-w packages/nextalign/tests/.clang-tidy \
-w packages/nextalign/tests/CMakeLists.txt \
-w packages/nextalign_cli/CMakeLists.txt \
-w packages/nextalign_cli/src/* \
-w packages/nextclade/CMakeLists.txt \
-w packages/nextclade/include/nextclade/* \
-w packages/nextclade/src/* \
-w packages/nextclade_cli/CMakeLists.txt \
-w packages/nextclade_cli/cli.json \
-w packages/nextclade_cli/src/* \
-w packages/nextclade_common/CMakeLists.txt \
-w packages/nextclade_common/include/nextclade_common/* \
-w packages/nextclade_common/scripts/* \
-w packages/nextclade_common/src/* \
-w packages/nextclade_json/CMakeLists.txt \
-w packages/nextclade_json/include/nextclade_json/* \
-w packages/nextclade_json/src/* \
-w packages/nextclade_wasm/CMakeLists.txt \
-w packages/nextclade_wasm/src/* \
-w scripts/* \
"

export FILES_TO_IGNORE="\
-i '.build' \
-i '.cache' \
-i '.vscode' \
-i .git \
-i .ignore \
-i .temp \
-i .tmp \
-i 3rdparty \
-i temp \
-i tmp \
"

RUN=0
EXEC=0
RELEASE=
WATCH=

for arg; do
  case "$arg" in
  "run" | "r")
    shift
    RUN=1
    EXEC=0
    break
    ;;
  "run-release" | "rr")
    shift
    RUN=1
    EXEC=0
    RELEASE="--release"
    break
    ;;
  "watch-run" | "wr")
    shift
    RUN=1
    EXEC=0
    WATCH=1
    break
    ;;
  "watch-run-release" | "wrr")
    shift
    RUN=1
    EXEC=0
    RELEASE="--release"
    WATCH=1
    break
    ;;
  "exec" | "e")
    shift
    RUN=0
    EXEC=1
    break
    ;;
  esac
done

docker build -q -t "${DOCKER_IMAGE_NAME}:latest" \
  -f "${PROJECT_ROOT_DIR}/Dockerfile" \
  --build-arg="UID=$(id -u)" \
  --build-arg="GID=$(id -g)" \
  --build-arg="USER=${USER}" \
  --build-arg="GROUP=${GROUP}" \
  "${PROJECT_ROOT_DIR}" \
  >/dev/null

COMMAND=${*:-}
if [ "${RUN}" == "1" ]; then
  COMMAND="python3 conanfile.py install_deps codegen configure build ${RELEASE} ${COMMAND}"

  if [ "${WATCH}" == "1" ]; then
    COMMAND="watchexec \
      --restart \
      --shell=bash \
      --debounce=10 \
      --no-meta \
      --no-environment \
      --exts=${EXTENSIONS_TO_WATCH} \
      ${FILES_TO_WATCH} \
      ${FILES_TO_IGNORE} \
      'reset; ${COMMAND}'"
  else
    COMMAND="${COMMAND}"
  fi
else
  COMMAND="${COMMAND}"
fi

DOCKER_PS_RESULT=$(docker ps -f "name=${DOCKER_CONTAINER_NAME}" --format '{{.Names}}')
if [ "${RUN}" != "1" ] && [ "${DOCKER_PS_RESULT}" == "${DOCKER_CONTAINER_NAME}" ]; then
  # If already running, exec a command in the existing instance
  docker exec -it \
    --user="$(id -u):$(id -g)" \
    --env="UID=$(id -u)" \
    --env="GID=$(id -g)" \
    --env="USER=${USER}" \
    --env="GROUP=${GROUP}" \
    --env="PS1=\${USER}@\${HOST}" \
    "${DOCKER_CONTAINER_NAME}" \
    nice -19 ionice -c3 bash -c "${HANDLE_SIGINT}; ${COMMAND} ${SUCCESS_OR_FAILURE}"
else
  # If not already running, run
  docker run -it --rm \
    --init \
    --name="${DOCKER_CONTAINER_NAME}" \
    --hostname="${DOCKER_IMAGE_NAME_SAFE}" \
    --user="$(id -u):$(id -g)" \
    --volume="${PWD}/:/src" \
    --volume="/etc/timezone:/etc/timezone:ro" \
    --volume="/etc/localtime:/etc/localtime:ro" \
    --env="UID=$(id -u)" \
    --env="GID=$(id -g)" \
    --env="USER=${USER}" \
    --env="GROUP=${GROUP}" \
    --env="PS1=\${USER}@\${HOST}" \
    "${DOCKER_IMAGE_NAME}" \
    nice -19 ionice -c3 bash -c "${HANDLE_SIGINT}; ${COMMAND} ${SUCCESS_OR_FAILURE}"
fi

#!/usr/bin/env python3

"""
Implements build system for C++ parts of the project.
"""

import os
import sys

from dotenv import dotenv_values

THIS_DIR = os.path.dirname(os.path.realpath(__file__))
PROJECT_ROOT_DIR = THIS_DIR

sys.path.append(os.path.join(THIS_DIR, "scripts", "lib"))
sys.path.append(os.path.join(THIS_DIR, "scripts", "build"))
sys.path.append(os.path.join(THIS_DIR, "scripts", "build", "lib"))

from configure_build import configure_build
from configure_common_variables import configure_common_variables
from install_deps import install_deps
from parse_args import parse_args, COMMANDS
from run import run
from run_build import run_build
from run_codegen import run_codegen
from run_unit_tests import run_unit_tests

# Combine system environment variables with variables read from .env files
os.environ = {
  **os.environ,
  **dotenv_values(".env.example"),
  **dotenv_values(".env"),
}

if __name__ == '__main__':
  args = parse_args()

  if len(args["commands"]) == 0:
    args["commands"] = COMMANDS

  config, shell = configure_common_variables(project_root_dir=PROJECT_ROOT_DIR, args=args)

  os.makedirs(config.BUILD_DIR, exist_ok=True)

  # Configure build tools, install 3rd-party dependencies
  # and ensure they can be found by the subsequent steps
  if 'install_deps' in args["commands"]:
    install_deps(config, shell)

  # Generate autogenerated code
  if 'codegen' in args["commands"]:
    run_codegen(config, shell)

  # Configure project build system and prepare makefiles
  if 'configure' in args["commands"]:
    configure_build(config, shell)

  # Run makefiles, compile and link binaries and copy them into the final location
  if 'build' in args["commands"]:
    run_build(config, shell)

  if 'test' in args["commands"]:
    run_unit_tests(config, shell)

  if 'run' in args["commands"]:
    run(config, shell)

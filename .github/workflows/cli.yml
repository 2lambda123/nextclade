# Build CLI binaries and publish them to GitHub Releases
name: cli

on:
  push:
    tags:
    branches:

  pull_request:
    branches:

  repository_dispatch:
    types: build

  workflow_dispatch:

  workflow_call:

concurrency:
  group: cli-${{ github.workflow }}-${{ github.ref_type }}-${{ github.event.pull_request.number || github.ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -euxo pipefail {0}


jobs:

  builder-docker-image:
    name: "Run 'builder-docker-image.yml' workflow"
    uses: ./.github/workflows/builder-docker-image.yml
    secrets: inherit
    concurrency:
      group: cli-builder-docker-image-workflow_call-${{ github.workflow }}-${{ github.ref_type }}-${{ github.event.pull_request.number || github.ref || github.run_id }}
      cancel-in-progress: true

  build-cli:
    name: "Build CLI (${{ matrix.arch }})"
    needs: [ builder-docker-image ]
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        arch:
          - aarch64-apple-darwin
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - x86_64-apple-darwin
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl

    steps:
      - name: "Setup environment (release)"
        if: endsWith(github.ref, '/release')
        run: |
          echo "ENVIRONMENT=release" >> $GITHUB_ENV
          echo "DATA_FULL_DOMAIN=https://data.clades.nextstrain.org" >> $GITHUB_ENV

      - name: "Setup environment (staging)"
        if: endsWith(github.ref, '/staging')
        run: |
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "DATA_FULL_DOMAIN=https://data.staging.clades.nextstrain.org" >> $GITHUB_ENV

      - name: "Setup environment (master)"
        if: ${{ !endsWith(github.ref, '/staging') && !endsWith(github.ref, '/release') }}
        run: |
          echo "ENVIRONMENT=master" >> $GITHUB_ENV
          echo "DATA_FULL_DOMAIN=https://data.master.clades.nextstrain.org" >> $GITHUB_ENV

      - name: "Checkout code"
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: true

      - name: "Get docker build checksum"
        id: docker-build-checksum
        run: echo "checksum=$(./scripts/docker_build_checksum.sh)" >> $GITHUB_OUTPUT

      - name: "Setup cache for Docker buildx (${{ matrix.arch }})"
        uses: actions/cache@v3
        with:
          path: .cache/docker/buildx
          key: cache-v1-buildx-${{ runner.os }}-${{ matrix.arch }}-${{ steps.docker-build-checksum.outputs.checksum }}
          restore-keys: |
            cache-v1-buildx-${{ runner.os }}-${{ matrix.arch }}-
            cache-v1-buildx-${{ runner.os }}-

      - name: "Setup cache for Rust and Cargo"
        uses: actions/cache@v3
        with:
          path: |
            .cache/docker/.cargo
            .build/
          key: cache-v1-cargo-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cache-v1-cargo-${{ runner.os }}-${{ matrix.arch }}-

      - name: "Prepare .env file"
        run: |
          cp .env.example .env
          sed -i -e "s|OSXCROSS_URL=http://example.com/osxcross/osxcross.tar.xz|OSXCROSS_URL=${{ secrets.OSXCROSS_URL }}|g" .env
          sed -i -e "s|DATA_FULL_DOMAIN=https://data.master.clades.nextstrain.org|DATA_FULL_DOMAIN=${DATA_FULL_DOMAIN}|g" .env

      - name: "Build CLI (${{ matrix.arch }})"
        run: |
          CROSS="${{ matrix.arch }}" ./docker-dev build-release

      - name: "Upload artifacts (${{ matrix.arch }})"
        uses: actions/upload-artifact@v3
        with:
          name: out
          path: ./.out/*


  publish-to-github-releases:
    name: "Publish to GitHub Releases"
    needs: [ build-cli ]
    # if: endsWith(github.ref, '/release')
    runs-on: ubuntu-22.04

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: true

      - name: "Download build artifacts"
        uses: actions/download-artifact@v3
        with:
          name: "out"
          path: ".out"

      - name: "Show build artifacts"
        run: |
          ls -al .out/

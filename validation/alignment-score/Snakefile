"""
Compare two branches for changes in alignment scores
Output sequences where alignments differ
Provide quick diagnostics
Run as:
```bash
snakemake --eval-branch <branch> --base-branch <branch>
```
"""

# TODO: Don't fail when nextclade errors, but output error into file, otherwise diffs are misleading


wildcard_constraints:
    dataset_name="[^/]+",
    build_type="[^/\._]+",
    build_type1="[^/\._]+",
    build_type2="[^/\._]+",
    seq_type="[^/]+",


datasets = [
    "sars-cov-2",
    "sars-cov-2-21L",
    "MPXV",
    "hMPXV",
    "hMPXV_B1",
    "flu_h1n1pdm_ha",
    "flu_h1n1pdm_na",
    "flu_h3n2_ha",
    "flu_h3n2_na",
    "flu_vic_ha",
    "flu_vic_na",
    "flu_yam_ha",
    "rsv_a",
    "rsv_b",
    "sars-cov-2-no-recomb",
]

outputs = [
    "default_diff.tsv",
    "default_diff_seqs.fasta",
    "default_diff_columns.tsv",
    "default_diff_alignment_score.tsv",
]


rule all:
    input:
        expand(
            "results/{dataset_name}/{outputs}", dataset_name=datasets, outputs=outputs
        ),


rule clone:
    """
    Checkout eval branch into new directory
    Build release
    """
    output:
        dir=directory("{build_type}_build/src/"),
    params:
        branch=lambda w: config[w.build_type]["branch"],
        url="https://github.com/nextstrain/nextclade.git",
    shell:
        """
        git clone --filter=blob:none -b {params.branch} {params.url} {output.dir}
        """


rule pull:
    """
    Pull latest changes from branches
    """
    input:
        dir="{build_type}_build/src",
    output:
        hash="{build_type}_build/hash.txt",
    params:
        branch=lambda w: config[w.build_type]["branch"],
    shell:
        """
        cd {input.dir}
        git checkout {params.branch}
        git pull
        cd -
        cat {input.dir}/.git/refs/heads/{params.branch} > {output.hash}
        """


rule pull_all:
    """
    Pull latest changes from branches
    """
    input:
        expand("{build_type}_build/hash.txt", build_type=["base", "eval"]),


rule build:
    """
    Build binary
    """
    input:
        dir="{build_type}_build/src",
        hash="{build_type}_build/hash.txt",
    output:
        bin="{build_type}_build/bin/nextclade",
    params:
        branch=lambda w: config[w.build_type]["branch"],
    shell:
        """
        cd {input.dir}
        git checkout {params.branch}
        cargo build --release --bin nextclade
        cd -
        mkdir -p {wildcards.build_type}_build/bin
        cp {input.dir}/target/release/nextclade {output.bin}
        """


rule bin_version:
    input:
        bin="{build_type}_build/bin/nextclade",
    output:
        "{build_type}_build/test.txt",
    shell:
        """
        nextclade --version > {output}
        """


rule download_dataset:
    input:
        bin="eval_build/bin/nextclade",
    output:
        sequences="sequences/{dataset_name}/sequences.fasta",
        zip="dataset/{dataset_name}.zip",
    params:
        dir="dataset/{dataset_name}",
    shell:
        """
        ./{input.bin} dataset get -n {wildcards.dataset_name} --output-zip {output.zip}
        ./{input.bin} dataset get -n {wildcards.dataset_name} --output-dir {params.dir}
        cp {params.dir}/sequences.fasta {output.sequences}
        """


rule run_nextclade_on_dataset_sequences:
    input:
        bin="{build_type}_build/bin/nextclade",
        dataset="dataset/{dataset_name}.zip",
        sequences="sequences/{dataset_name}/sequences.fasta",
    output:
        tsv="results/{dataset_name}/{build_type}/default.tsv",
        alignment="results/{dataset_name}/{build_type}/alignment.fasta",
    shell:
        """
        ./{input.bin} run --input-dataset {input.dataset} {input.sequences} --output-tsv {output.tsv} --output-fasta {output.alignment}
        """


rule run_nextclade_on_custom_sequences:
    input:
        bin="{build_type}_build/bin/nextclade",
        sequences="sequences/{dataset_name}",
        dataset="dataset/{dataset_name}.zip",
    output:
        tsv="results/{dataset_name}/{build_type}/custom.tsv",
    shell:
        """
        ./{input.bin} run \
        --input-dataset {input.dataset} \
        --output-tsv {output.tsv} \
        {input.sequences}/*
        """


rule diff_tsv:
    input:
        tsv1="results/{dataset_name}/base/{seq_type}.tsv",
        tsv2="results/{dataset_name}/eval/{seq_type}.tsv",
    output:
        diff="results/{dataset_name}/{seq_type}_diff.tsv",
        diff_seqs="results/{dataset_name}/{seq_type}_diff_seqs.txt",
    shell:
        """
        # Don't fail snakemake on error exit code
        set +e
        diff <(sort {input.tsv1}) <(sort {input.tsv2}) > {output.diff}
        error=$?
        if [ $error -eq 1 ]; then
            echo "Files differ"
        elif [ $error -gt 1 ]; then
            echo "Something went wrong"
            exit $error
        else
            echo "Files are the same"
            touch {output.diff_seqs}
            exit 0
        fi
        # Extract sequence names of differing sequences
        grep -E '^<|^>' {output.diff} | awk '{{print $3}}' | sort | uniq > {output.diff_seqs}
        """


rule get_differing_seqs:
    input:
        diff_seqs="results/{dataset_name}/{seq_type}_diff_seqs.txt",
        sequences="sequences/{dataset_name}/sequences.fasta",
    output:
        diff_seqs="results/{dataset_name}/{seq_type}_diff_seqs.fasta",
    params:
        seq_dir="sequences/{dataset_name}",
    shell:
        """
        seqkit grep -w0 -f {input.diff_seqs} {params.seq_dir}/* > {output.diff_seqs}
        """


rule tsv_column_diff:
    input:
        tsv1="results/{dataset_name}/base/{seq_type}.tsv",
        tsv2="results/{dataset_name}/eval/{seq_type}.tsv",
    output:
        diff="results/{dataset_name}/{seq_type}_diff_columns.tsv",
    shell:
        """
        python scripts/tsv-diff.py \
        --base-tsv-path {input.tsv1} \
        --eval-tsv-path {input.tsv2} \
        > {output.diff}
        """


rule alignment_score_diff:
    input:
        tsv1="results/{dataset_name}/base/{seq_type}.tsv",
        tsv2="results/{dataset_name}/eval/{seq_type}.tsv",
    output:
        diff="results/{dataset_name}/{seq_type}_diff_alignment_score.tsv",
    shell:
        """
        python scripts/tsv-diff.py \
        --base-tsv-path {input.tsv1} \
        --eval-tsv-path {input.tsv2} \
        --columns alignmentScore \
        > {output.diff}
        """

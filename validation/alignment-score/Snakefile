"""
Compare two branches for changes in alignment scores
Output sequences where alignments differ
Provide quick diagnostics
Run as:
```bash
snakemake --eval-branch <branch> --base-branch <branch>
```
"""


wildcard_constraints:
    dataset_name="[^/]+",
    build_type="[^/\._]+",
    build_type1="[^/\._]+",
    build_type2="[^/\._]+",


rule clone:
    """
    Checkout eval branch into new directory
    Build release
    """
    output:
        dir=directory("{build_type}_build/src"),
    params:
        branch=lambda w: config[w.build_type]["branch"],
        url="https://github.com/nextstrain/nextclade.git",
    shell:
        """
        git clone --filter=blob:none -b {params.branch} {params.url} {output.dir}
        """


rule build:
    """
    Build eval branch
    """
    input:
        dir="{build_type}_build/src",
    output:
        dir=directory("{build_type}_build/bin"),
    params:
        branch=lambda w: config[w.build_type]["branch"],
    shell:
        """
        cd {input.dir}
        git checkout {params.branch}
        cargo build --release
        cd -
        mkdir -p {output.dir}
        cp {input.dir}/target/release/nextclade {output.dir}
        """


rule bin_version:
    input:
        bin="{build_type}_build/bin/nextclade",
    output:
        "{build_type}_build/test.txt",
    shell:
        """
        nextclade --version > {output}
        """


rule download_dataset:
    input:
        bin="{build_type}_build/bin/nextclade",
    output:
        sequences="dataset/{dataset_name}/{build_type}/sequences.fasta",
        zip="dataset/{dataset_name}/{build_type}.zip",
    params:
        dir="dataset/{dataset_name}/{build_type}",
    shell:
        """
        ./{input.bin} dataset get -n {wildcards.dataset_name} --output-zip {output.zip}
        ./{input.bin} dataset get -n {wildcards.dataset_name} --output-dir {params.dir}
        """


rule run_nextclade_on_dataset_sequences:
    input:
        bin="{build_type}_build/bin/nextclade",
        dataset="dataset/{dataset_name}/{build_type}.zip",
        sequences="dataset/{dataset_name}/{build_type}/sequences.fasta",
    output:
        tsv="results/{dataset_name}/{build_type}/default.tsv",
    shell:
        """
        ./{input.bin} run --input-dataset {input.dataset} {input.sequences} --output-tsv {output.tsv}
        """


rule run_nextclade_on_custom_sequences:
    input:
        bin="{build_type}_build/bin/nextclade",
        sequences="sequences/{dataset_name}",
        dataset="dataset/{dataset_name}/{build_type}.zip",
    output:
        tsv="results/{dataset_name}/{build_type}/custom.tsv",
    shell:
        """
        ./{input.bin} run \
        --input-dataset {input.dataset} \
        --output-tsv {output.tsv} \
        {input.sequences}/*
        """


rule diff_tsv:
    input:
        tsv1="results/{dataset_name}/base/{seq_type}.tsv",
        tsv2="results/{dataset_name}/eval/{seq_type}.tsv",
    output:
        diff="results/{dataset_name}/{seq_type}_diff.tsv",
    shell:
        """
        # Don't fail snakemake on error exit code
        set +e
        diff <(sort {input.tsv1}) <(sort {input.tsv2}) > {output.diff}
        error=$?
        if [ $error -eq 1 ]; then
            echo "Files differ"
        elif [ $error -gt 1 ]; then
            echo "Something went wrong"
            exit $error
        else
            echo "Files are the same"
        fi
        """

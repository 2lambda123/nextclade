#!/usr/bin/env bash
# shellcheck disable=SC2155
set -euxo pipefail
trap "exit 0" INT


export NEXTCLADE_BIN="${1:? "Usage: ${0} <path_to_nextclade> <path_to_datasets_collection_dir>"}"
export INPUT_DATASETS_DIR="${2:? "Usage: ${0} <path_to_nextclade> <path_to_datasets_collection_dir>"}"
export NEXTCLADE_BIN

THIS_DIR=$(
  cd "$(dirname "${BASH_SOURCE[0]}")"
  pwd
)
export THIS_DIR

export OUT_DIR="$THIS_DIR/../tmp_v3/smoke-tests/result"

function run_one_experimental_test() {
  dataset_dir=$1
  name="$(realpath --relative-to="$INPUT_DATASETS_DIR" "$dataset_dir")"

  # This dataset is crashing, probably due to defective or unsupported features
  if [[ "$name" =~ vic_na* ]]; then
    return
  fi

  # This dataset is crashing, due to a defect in the dataset
  if [[ "$name" == sars-cov-2-21L* ]]; then
    return
  fi

  # This dataset is crashing, due to a defect in the dataset's genome annotation
  if [[ "$name" == flu/h3n2/ha* ]]; then
    return
  fi

  sequences="$dataset_dir/sequences.fasta"
  msg_no_sequences=""
  if [ ! -f "${sequences}" ]; then
    sequences="$dataset_dir/reference.fasta"
    msg_no_sequences=" (Note: this dataset contains no example sequences. Using reference sequence as query.)"
  fi

  echo "Running '${NEXTCLADE_BIN}' for '${name}'${msg_no_sequences}"

  ${NEXTCLADE_BIN} run --quiet --in-order --include-reference \
    --input-dataset="${dataset_dir}/" \
    --output-translations="$OUT_DIR/translations/gene_{gene}.translation.fasta" \
    --output-fasta="$OUT_DIR/aligned.fasta" \
    --output-tsv="$OUT_DIR/nextclade.tsv" \
    --output-tree="$OUT_DIR/tree.json" \
    --output-graph="$OUT_DIR/graph.json" \
    "${sequences}"
}
export -f run_one_experimental_test

find "${INPUT_DATASETS_DIR}" -iname "pathogen.json" -exec dirname '{}' \; |
  parallel --keep-order --jobs=+0 run_one_experimental_test

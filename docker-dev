#!/usr/bin/env bash

set -euxo pipefail

function abspath() {
  readlink -m "$1"
}

export THIS_DIR=$(
  cd "$(dirname "${BASH_SOURCE[0]}")"
  pwd
)

SUCCESS="({ set +x; } 2> /dev/null && echo 'ðŸŸ© Success' && exit 0)"
FAILURE="({ set +x; } 2> /dev/null && echo 'ðŸŸ¥ Failure' && exit 1)"
CANCELLED="({ set +x; } 2> /dev/null && echo 'ðŸŸ¦ Cancelled' && exit 0)"
SUCCESS_OR_FAILURE="&& ${SUCCESS} || ${FAILURE}"
HANDLE_SIGINT="trap \"${CANCELLED}; exit 0\" INT"

export PACKAGE_NAME="nextclade"
export PACKAGE_DIR_REL=""

export PROJECT_ROOT_DIR="$(abspath "${THIS_DIR}")"
export PACKAGE_DIR="$(abspath "${PROJECT_ROOT_DIR}/${PACKAGE_DIR_REL}")"

export DOCKER_REPO="nextstrain/nextclade_builder"
export DOCKER_IMAGE_NAME_SAFE="${DOCKER_REPO//\//-}"
export DOCKER_CONTAINER_NAME="${DOCKER_IMAGE_NAME_SAFE}-$(date +%s)"

export USER=user
export GROUP=user

export BUILD_DIR_REL=".build/docker/${PACKAGE_DIR_REL}"
export BUILD_DIR="$(abspath "${PACKAGE_DIR}/${BUILD_DIR_REL}")"
export BUILD_DIR_TEST="${BUILD_DIR}/test"

export CACHE_DIR_REL=".cache/docker/${PACKAGE_DIR_REL}"
export CACHE_DIR="$(abspath "${PACKAGE_DIR}/${CACHE_DIR_REL}")"

export NICE="nice -14 ionice -c2 -n3"
export TIME="/usr/bin/time --quiet -f \"Cmd : %C\nTime: %E\nMem : %M KB\n\""

export RUST_BACKTRACE="full"
export COLORBT_SHOW_HIDDEN="0"
export RUST_LOG="warn"
export CARGO_BUILD_TARGET_DIR="${BUILD_DIR_REL}"

export EXTENSIONS_TO_WATCH="rs,toml,lock"

export FILES_TO_WATCH="\
-w 'Cargo.lock' \
-w 'Cargo.toml' \
-w 'clippy.toml' \
-w 'packages_rs/nextclade-web/src' \
-w 'packages_rs/nextclade-web/Cargo.toml' \
-w 'packages_rs/nextclade/src' \
-w 'packages_rs/nextclade/Cargo.toml' \
-w 'rust-toolchain.toml' \
-w 'rustfmt.toml' \
"

export FILES_TO_IGNORE="\
-i '.build' \
-i '.cache' \
-i '.vscode' \
-i 'target/' \
-i 'packages_rs/nextclade-web/src/gen/' \
"

export LINT_FIX="--fix --allow-staged"

FORCE_DOCKER_IMAGE_BUILD=${FORCE_DOCKER_IMAGE_BUILD:-}
DOCKER_IMAGE_PUSH=0
BUILD=0
RUN=0
WASM=0
WEB=0
RELEASE=
WATCH=0
TEST=0
TEST_FLAGS=
BENCH=0
EXAMPLE=0
LINT=0
FIX=

case "${1:-}" in
"docker-image-build" | "d")
  shift
  FORCE_DOCKER_IMAGE_BUILD=1
  ;;
"docker-image-build-push" | "dp")
  shift
  FORCE_DOCKER_IMAGE_BUILD=1
  DOCKER_IMAGE_PUSH=1
  ;;
"build" | "b")
  shift
  BUILD=1
  ;;
"build-release" | "br")
  shift
  BUILD=1
  RELEASE="--release"
  ;;
"run" | "r")
  shift
  RUN=1
  ;;
"run-release" | "rr")
  shift
  RUN=1
  RELEASE="--release"
  ;;
"watch-run" | "wr")
  shift
  RUN=1
  WATCH=1
  ;;
"watch-run-release" | "wrr")
  shift
  RUN=1
  RELEASE="--release"
  WATCH=1
  ;;
"wasm" | "W")
  shift
  WASM=1
  RELEASE="dev"
  ;;
"wasm-release" | "Wr")
  shift
  WASM=1
  RELEASE="prod"
  ;;
"watch-wasm" | "wW")
  shift
  WASM=1
  RELEASE="dev"
  WATCH=1
  ;;
"watch-wasm-release" | "wWr")
  shift
  WASM=1
  RELEASE="prod"
  WATCH=1
  ;;
"web" | "a")
  shift
  WEB=1
  RELEASE="dev"
  WATCH=0
  ;;
"web-release" | "ar")
  shift
  WEB=1
  RELEASE="prod:watch"
  WATCH=0
  ;;
"test" | "t")
  shift
  TEST=1
  WATCH=0
  ;;
"watch-test" | "wt")
  shift
  TEST=1
  WATCH=1
  ;;
"test-unit" | "tu")
  shift
  TEST=1
  TEST_FLAGS="--lib"
  WATCH=0
  ;;
"watch-test-unit" | "wtu")
  shift
  TEST=1
  TEST_FLAGS="--lib"
  WATCH=1
  ;;
"test-integration" | "ti")
  shift
  TEST=1
  TEST_FLAGS="--test='*'"
  WATCH=0
  ;;
"watch-test-integration" | "wti")
  shift
  TEST=1
  TEST_FLAGS="--test='*'"
  WATCH=1
  ;;
"bench" | "B")
  shift
  BENCH=1
  WATCH=0
  ;;
"watch-bench" | "wB")
  shift
  BENCH=1
  WATCH=1
  ;;
"example" | "E")
  shift
  EXAMPLE=1
  ;;
"example-release" | "Er")
  shift
  EXAMPLE=1
  RELEASE="--release"
  ;;
"lint" | "l")
  shift
  LINT=1
  WATCH=0
  FIX=
  ;;
"watch-lint" | "wl")
  shift
  LINT=1
  WATCH=1
  FIX=
  ;;
"lint-fix" | "lf")
  shift
  LINT=1
  WATCH=0
  FIX="${LINT_FIX}"
  ;;
"watch-lint-fix" | "wlf")
  shift
  LINT=1
  WATCH=1
  FIX="${LINT_FIX}"
  ;;
"exec" | "e")
  shift
  RUN=0
  ;;
esac

if [ "${WASM}" == "1" ]; then
  CROSS="wasm32-unknown-unknown"
fi

DOCKER_TARGET="dev"
RUST_TARGET=""
if [ -n "${CROSS:-}" ]; then
  DOCKER_TARGET="cross-${CROSS}"
  RUST_TARGET="--target=${CROSS}"
fi
DOCKER_IMAGE_VERSION="$(./scripts/docker_build_checksum.sh)"

MACOS_SDK_FILENAME="${MACOS_SDK_FILENAME:-MacOSX11.1.sdk.tar.xz}"
MACOS_SDK_SHA="${MACOS_SDK_SHA:=4a575e099c1b5dafe2835770d2a225c4ed082c2a36ecec9eac0946339fe665f3}"

if ! docker inspect --format '{{.Id}}' "${DOCKER_REPO}:${DOCKER_TARGET}-${DOCKER_IMAGE_VERSION}" >/dev/null ||
  [ -n "${FORCE_DOCKER_IMAGE_BUILD}" ]; then

  export DOCKER_BUILDKIT=1
  export BUILDKIT_PROGRESS=plain
  export PROGRESS_NO_TRUNC=1

  { docker pull "${DOCKER_REPO}:dev" || true; }
  { docker pull "${DOCKER_REPO}:dev-${DOCKER_IMAGE_VERSION}" || true; }
  { docker pull "${DOCKER_REPO}:${DOCKER_TARGET}" || true; }
  { docker pull "${DOCKER_REPO}:${DOCKER_TARGET}-${DOCKER_IMAGE_VERSION}" || true; }

  if [[ "${DOCKER_TARGET}" == *apple* ]] && [ ! -f "${PROJECT_ROOT_DIR}/.downloads/${MACOS_SDK_FILENAME}" ]; then
    mkdir -p ".downloads"
    curl -fsSL "${MACOS_SDK_URL}" -o ".downloads/${MACOS_SDK_FILENAME}"
  fi

  docker build \
    --file="docker-dev.dockerfile" \
    --target="${DOCKER_TARGET}" \
    --tag="${DOCKER_REPO}:${DOCKER_TARGET}" \
    --tag="${DOCKER_REPO}:${DOCKER_TARGET}-${DOCKER_IMAGE_VERSION}" \
    --cache-from="${DOCKER_REPO}:${DOCKER_TARGET}" \
    --cache-from="${DOCKER_REPO}:${DOCKER_TARGET}-${DOCKER_IMAGE_VERSION}" \
    --network=host \
    --build-arg="UID=$(id -u)" \
    --build-arg="GID=$(id -g)" \
    --build-arg="USER=user" \
    --build-arg="GROUP=user" \
    --build-arg="MACOS_SDK_FILENAME=${MACOS_SDK_FILENAME}" \
    --build-arg="MACOS_SDK_SHA=${MACOS_SDK_SHA}" \
    .

  if [ "${DOCKER_IMAGE_PUSH}" == "1" ]; then
    docker push "${DOCKER_REPO}:${DOCKER_TARGET}" || true
    docker push "${DOCKER_REPO}:${DOCKER_TARGET}-${DOCKER_IMAGE_VERSION}" || true
  fi

  if [ -n "${FORCE_DOCKER_IMAGE_BUILD}" ]; then
    exit 0;
  fi
fi

export RUSTC_FORCE_INCREMENTAL=""
if [ -n "${RELEASE}" ]; then
  export RUSTC_FORCE_INCREMENTAL=1
fi

PARAMS=""
COMMAND=${*:-}
PORTS=
if [ "${RUN}" == "1" ]; then
  PARAMS="$(echo "${@:-}" | xargs)"
  if [ -n "${PARAMS}" ]; then
    PARAMS="--bin=${PARAMS}"
  fi
  COMMAND="cargo run -q --target-dir='${BUILD_DIR_REL}' ${RUST_TARGET} ${RELEASE} ${PARAMS}"
elif [ "${EXAMPLE}" == "1" ]; then
  PARAMS="$(echo "${@:-}" | xargs)"
  if [ -n "${PARAMS}" ]; then
    PARAMS="--example=${PARAMS}"
  fi
  COMMAND="cargo run -q --target-dir='${BUILD_DIR_REL}' ${RUST_TARGET} ${RELEASE} ${PARAMS}"
elif [ "${BUILD}" == "1" ]; then
  COMMAND="cargo build --target-dir='${BUILD_DIR_REL}' ${RUST_TARGET} ${RELEASE} ${PARAMS}"
elif [ "${WASM}" == "1" ]; then
  COMMAND="bash -c \"set -euo pipefail && cd packages_rs/nextclade-web && yarn wasm-${RELEASE}\""
elif [ "${WEB}" == "1" ]; then
  PORTS="-p 3000:3000"
  COMMAND="bash -c \"set -euo pipefail && cd packages_rs/nextclade-web && yarn install && yarn ${RELEASE}\""
elif [ "${TEST}" == "1" ]; then
  PRETTY_TEST="( grep --color=always --line-buffered -vP \"running.*tests|\x1b\[32m.\x1b\(B\x1b\[m|^$|test result|TEST START\" || true )"
  COMMAND="cargo test --color=always -q --target-dir='${BUILD_DIR_REL}' ${RUST_TARGET} ${TEST_FLAGS} ${*:-} -- --nocapture --color=always | ${PRETTY_TEST} ${SUCCESS_OR_FAILURE}"
elif [ "${BENCH}" == "1" ]; then
  PRETTY_BENCH="( grep --color=always --line-buffered -vP \"Benchmarking|Gnuplot not found, using plotters backend\" || true )"
  COMMAND="cargo bench --color=always -q --target-dir='${BUILD_DIR_REL}' ${RUST_TARGET} ${*:-} | ${PRETTY_BENCH} ${SUCCESS_OR_FAILURE}"
elif [ "${LINT}" == "1" ]; then
  COMMAND="cargo clippy --exclude=3rdparty -q --target-dir=\"${BUILD_DIR_REL}\" --all ${FIX:-}"
else
  COMMAND="${NICE} ${TIME} ${COMMAND}"
fi

if [ "${WATCH}" == "1" ]; then
  COMMAND="${NICE} watchexec \
    --restart \
    --shell=bash \
    --debounce=10 \
    --no-meta \
    --no-environment \
    --exts=${EXTENSIONS_TO_WATCH} \
    ${FILES_TO_WATCH} \
    ${FILES_TO_IGNORE} \
    'reset; ${NICE} ${TIME} ${COMMAND}'"
else
  COMMAND="${NICE} ${TIME} ${COMMAND}"
fi

mkdir -p "${BUILD_DIR}" "${CACHE_DIR}/.cargo/"{install,registry}

# shellcheck disable=SC2086
docker run -it --rm \
  --network=host \
  --init \
  --name="${DOCKER_CONTAINER_NAME}" \
  --hostname="${DOCKER_IMAGE_NAME_SAFE}" \
  --user="$(id -u):$(id -g)" \
  --volume="${PROJECT_ROOT_DIR}:/workdir" \
  --volume="${CACHE_DIR}/.cargo/install:/home/${USER}/.cargo/install" \
  --volume="${CACHE_DIR}/.cargo/registry:/home/${USER}/.cargo/registry" \
  --workdir="/workdir/${PACKAGE_DIR_REL}" \
  --env="UID=$(id -u)" \
  --env="GID=$(id -g)" \
  --env="USER=${USER}" \
  --env="GROUP=${GROUP}" \
  --env="PS1=\${USER}@\${HOST}" \
  --env="RUST_BACKTRACE=${RUST_BACKTRACE}" \
  --env="COLORBT_SHOW_HIDDEN=${COLORBT_SHOW_HIDDEN}" \
  --env="RUST_LOG=${RUST_LOG}" \
  --env="CARGO_BUILD_TARGET_DIR=${CARGO_BUILD_TARGET_DIR}" \
  --env="RUSTC_FORCE_INCREMENTAL=${RUSTC_FORCE_INCREMENTAL}" \
  ${PORTS} \
  "${DOCKER_REPO}:${DOCKER_TARGET}-${DOCKER_IMAGE_VERSION}" \
  bash -c "set -euo pipefail; ${HANDLE_SIGINT}; ${COMMAND} ${SUCCESS_OR_FAILURE}"

if [ -n "${CROSS:-}" ] && [ -n "${RELEASE:-}" ] && { [ "${BUILD:-}" == 1 ] || [ "${RUN:-}" == 1 ]; }; then
  mkdir -p .out/
  if [[ "${CROSS}" == *windows* ]]; then
    cp "${BUILD_DIR}/${CROSS}/release/nextalign.exe" ".out/nextalign-${CROSS}.exe"
    cp "${BUILD_DIR}/${CROSS}/release/nextclade.exe" ".out/nextclade-${CROSS}.exe"
  else
    cp "${BUILD_DIR}/${CROSS}/release/nextalign" ".out/nextalign-${CROSS}"
    cp "${BUILD_DIR}/${CROSS}/release/nextclade" ".out/nextclade-${CROSS}"
  fi
fi

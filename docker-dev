#!/usr/bin/env bash

set -euo pipefail

function abspath() {
  readlink -m "$1"
}

export THIS_DIR=$(
  cd $(dirname "${BASH_SOURCE[0]}")
  pwd
)

SUCCESS="({ set +x; } 2> /dev/null && echo 'ðŸŸ© Success' && exit 0)"
FAILURE="({ set +x; } 2> /dev/null && echo 'ðŸŸ¥ Failure' && exit 1)"
CANCELLED="({ set +x; } 2> /dev/null && echo 'ðŸŸ¦ Cancelled' && exit 0)"
SUCCESS_OR_FAILURE="&& ${SUCCESS} || ${FAILURE}"
HANDLE_SIGINT="trap \"${CANCELLED}; exit 0\" INT"

export PACKAGE_NAME="nextclade"
#export PACKAGE_DIR_REL="packages/${PACKAGE_NAME}"
export PACKAGE_DIR_REL=""

export PROJECT_ROOT_DIR="$(abspath "${THIS_DIR}")"
export PACKAGE_DIR="$(abspath "${PROJECT_ROOT_DIR}/${PACKAGE_DIR_REL}")"

export DOCKER_IMAGE_NAME="${PACKAGE_NAME}-dev"
export DOCKER_CONTAINER_NAME="${DOCKER_IMAGE_NAME//\//-}-$(date +%s)"

export USER=user
export GROUP=user

#export BUILD_DIR_REL="../../.build/${PACKAGE_DIR_REL}"
export BUILD_DIR_REL=".build/docker/${PACKAGE_DIR_REL}"
export BUILD_DIR="$(abspath "${PACKAGE_DIR}/${BUILD_DIR_REL}")"
export BUILD_DIR_TEST="${BUILD_DIR}/test"

#export CACHE_DIR_REL="../../.cache/${PACKAGE_DIR_REL}"
export CACHE_DIR_REL=".cache/docker/${PACKAGE_DIR_REL}"
export CACHE_DIR="$(abspath "${PACKAGE_DIR}/${CACHE_DIR_REL}")"

export MAKES="make --no-print-directory"
export NICE="nice -14 ionice -c2 -n3"
export TIME="/usr/bin/time --quiet -f \"Cmd : %C\nTime: %E\nMem : %M KB\n\""

export RUST_BACKTRACE="full"
export COLORBT_SHOW_HIDDEN="0"
export RUST_LOG="warn"
export CARGO_BUILD_TARGET_DIR="${BUILD_DIR_REL}"

export LINT_NORMAL="\
-Wfuture_incompatible \
-Wnonstandard_style \
-Wrust_2018_idioms \
-Wtrivial_numeric_casts \
\
-Wclippy::all \
\
-Wclippy::await_holding_lock \
-Wclippy::char_lit_as_u8 \
-Wclippy::checked_conversions \
-Wclippy::dbg_macro \
-Wclippy::debug_assert_with_mut_call \
-Wclippy::disallowed_script_idents \
-Wclippy::doc_markdown \
-Wclippy::empty_enum \
-Wclippy::enum_glob_use \
-Wclippy::equatable_if_let \
-Wclippy::exit \
-Wclippy::expl_impl_clone_on_copy \
-Wclippy::explicit_deref_methods \
-Wclippy::explicit_into_iter_loop \
-Wclippy::fallible_impl_from \
-Wclippy::filter_map_next \
-Wclippy::flat_map_option \
-Wclippy::float_cmp_const \
-Wclippy::fn_params_excessive_bools \
-Wclippy::fn_to_numeric_cast_any \
-Wclippy::from_iter_instead_of_collect \
-Wclippy::if_let_mutex \
-Wclippy::implicit_clone \
-Wclippy::imprecise_flops \
-Wclippy::index_refutable_slice \
-Wclippy::inefficient_to_string \
-Wclippy::invalid_upcast_comparisons \
-Wclippy::iter_not_returning_iterator \
-Wclippy::large_digit_groups \
-Wclippy::large_stack_arrays \
-Wclippy::large_types_passed_by_value \
-Wclippy::let_unit_value \
-Wclippy::linkedlist \
-Wclippy::lossy_float_literal \
-Wclippy::macro_use_imports \
-Wclippy::manual_ok_or \
-Wclippy::map_err_ignore \
-Wclippy::map_flatten \
-Wclippy::map_unwrap_or \
-Wclippy::match_on_vec_items \
-Wclippy::match_same_arms \
-Wclippy::match_wild_err_arm \
-Wclippy::match_wildcard_for_single_variants \
-Wclippy::mem_forget \
-Wclippy::mismatched_target_os \
-Wclippy::missing_enforced_import_renames \
-Wclippy::mut_mut \
-Wclippy::mutex_integer \
-Wclippy::needless_continue \
-Wclippy::needless_for_each \
-Wclippy::negative_feature_names \
-Wclippy::nonstandard_macro_braces \
-Wclippy::option_option \
-Wclippy::path_buf_push_overwrite \
-Wclippy::ptr_as_ptr \
-Wclippy::rc_mutex \
-Wclippy::ref_option_ref \
-Wclippy::rest_pat_in_fully_bound_structs \
-Wclippy::same_functions_in_if_condition \
-Wclippy::semicolon_if_nothing_returned \
-Wclippy::single_match_else \
-Wclippy::string_add \
-Wclippy::string_add_assign \
-Wclippy::string_lit_as_bytes \
-Wclippy::string_to_string \
-Wclippy::todo \
-Wclippy::trailing_empty_array \
-Wclippy::trait_duplication_in_bounds \
-Wclippy::unimplemented \
-Wclippy::unnecessary_wraps \
-Wclippy::unnested_or_patterns \
-Wclippy::useless_transmute \
-Wclippy::verbose_file_reads \
-Wclippy::zero_sized_map_values \
"

export LINT_EXTRA="\
  ${LINT_NORMAL} \
  -Wclippy::pedantic \
"

export LINT_CRAZY="\
  ${LINT_EXTRA} \
  -Wclippy::restriction \
  -Wclippy::nursery \
"

export LINT_ALLOW_NOW_BUT_FIX_THESE_LATER=" \
-Aclippy::cognitive-complexity \
-Aclippy::else-if-without-else  \
-Aclippy::expect-used \
-Aclippy::missing-const-for-fn \
-Aclippy::panic \
-Aclippy::panic-in-result-fn \
-Aclippy::suboptimal_flops \
-Aclippy::too_many_arguments \
-Aclippy::unsafe-derive-deserialize \
-Aclippy::unwrap-in-result \
-Aclippy::unwrap-used \
-Aclippy::useless-transmute \
"

export LINT_ALLOW=" \
${LINT_ALLOW_NOW_BUT_FIX_THESE_LATER} \
-Aclippy::as-conversions  \
-Aclippy::cast-lossless \
-Aclippy::cast-possible-truncation \
-Aclippy::cast-possible-wrap \
-Aclippy::cast-precision-loss \
-Aclippy::cast-sign-loss \
-Aclippy::default-numeric-fallback \
-Aclippy::doc-markdown \
-Aclippy::exhaustive-enums \
-Aclippy::exhaustive-structs \
-Aclippy::float-arithmetic \
-Aclippy::if-not-else \
-Aclippy::implicit-hasher \
-Aclippy::implicit-return  \
-Aclippy::inconsistent_digit_grouping \
-Aclippy::indexing-slicing \
-Aclippy::integer-arithmetic \
-Aclippy::integer-division \
-Aclippy::iter_nth_zero \
-Aclippy::large_digit_groups \
-Aclippy::let-underscore-must-use \
-Aclippy::match-same-arms \
-Aclippy::missing-docs-in-private-items  \
-Aclippy::missing-errors-doc \
-Aclippy::missing-panics-doc \
-Aclippy::missing_inline_in_public_items \
-Aclippy::mod-module-files \
-Aclippy::module-name-repetitions \
-Aclippy::module_inception \
-Aclippy::must-use-candidate \
-Aclippy::new_without_default \
-Aclippy::non-ascii-literal \
-Aclippy::option-if-let-else \
-Aclippy::pattern-type-mismatch \
-Aclippy::print-stderr  \
-Aclippy::print-stdout  \
-Aclippy::separated-literal-suffix \
-Aclippy::shadow-reuse \
-Aclippy::shadow-same \
-Aclippy::shadow-unrelated \
-Aclippy::should_implement_trait \
-Aclippy::similar-names \
-Aclippy::too-many-lines \
-Aclippy::unnecessary-wraps \
-Aclippy::unreachable \
-Aclippy::unreadable-literal  \
-Aclippy::unused-self \
-Aclippy::unused-unit \
-Aclippy::use-debug  \
-Aclippy::use-self \
-Aclippy::wildcard-enum-match-arm \
"

export LINT_FIX="--fix --allow-staged"


export EXTENSIONS_TO_WATCH="rs,toml,lock"

export FILES_TO_WATCH="\
-w 'Cargo.lock' \
-w 'Cargo.toml' \
-w 'clippy.toml' \
-w 'packages_rs/nextclade-cli/src' \
-w 'packages_rs/nextclade-cli/Cargo.toml' \
-w 'packages_rs/nextclade-web/src' \
-w 'packages_rs/nextclade-web/Cargo.toml' \
-w 'packages_rs/nextclade/src' \
-w 'packages_rs/nextclade/Cargo.toml' \
-w 'rust-toolchain.toml' \
-w 'rustfmt.toml' \
"

export FILES_TO_IGNORE="\
-i '.build' \
-i '.cache' \
-i '.vscode' \
-i 'target/' \
-i 'packages_rs/nextclade-web/src/gen/' \
"

BUILD=0
RUN=0
WASM=0
WEB=0
EXEC=0
RELEASE=
WATCH=0
TEST=0
LINT=
FIX=

case "$1" in
"build" | "b")
  shift
  BUILD=1
  ;;
"build-release" | "br")
  shift
  BUILD=1
  RELEASE="--release"
  ;;
"run" | "r")
  shift
  RUN=1
  EXEC=0
  ;;
"run-release" | "rr")
  shift
  RUN=1
  RELEASE="--release"
  ;;
"watch-run" | "wr")
  shift
  RUN=1
  WATCH=1
  ;;
"watch-run-release" | "wrr")
  shift
  RUN=1
  RELEASE="--release"
  WATCH=1
  ;;
"wasm" | "w")
  shift
  WASM=1
  RELEASE="dev"
  WATCH=0
  ;;
"watch-wasm" | "ww")
  shift
  WASM=1
  RELEASE="dev"
  WATCH=1
  ;;
"watch-wasm-release" | "wwr")
  shift
  WASM=1
  RELEASE="prod"
  WATCH=1
  ;;
"web" | "a")
  shift
  WEB=1
  RELEASE="dev"
  WATCH=0
  ;;
"web-release" | "ar")
  shift
  WEB=1
  RELEASE="prod"
  WATCH=0
  ;;
"test" | "t")
  shift
  TEST=1
  WATCH=0
  ;;
"watch-test" | "wt")
  shift
  TEST=1
  WATCH=1
  ;;
"lint" | "l")
  shift
  LINT="${LINT_NORMAL}"
  WATCH=0
  FIX=
  ;;
"watch-lint" | "wl")
  shift
  LINT="${LINT_NORMAL}"
  WATCH=1
  FIX=
  ;;
"lint-extra" | "le")
  shift
  LINT="${LINT_EXTRA}"
  WATCH=0
  FIX=
  ;;
"watch-lint-extra" | "wle")
  shift
  LINT="${LINT_EXTRA}"
  WATCH=1
  FIX=
  ;;
"lint-crazy" | "lc")
  shift
  LINT="${LINT_CRAZY}"
  WATCH=0
  FIX=
  ;;
"watch-lint-crazy" | "wlc")
  shift
  LINT="${LINT_CRAZY}"
  WATCH=1
  FIX=
  ;;
"lint-fix" | "lf")
  shift
  LINT="${LINT_NORMAL}"
  WATCH=0
  FIX="${LINT_FIX}"
  ;;
"watch-lint-fix" | "wlf")
  shift
  LINT="${LINT_NORMAL}"
  WATCH=1
  FIX="${LINT_FIX}"
  ;;
"lint-extra-fix" | "lef")
  shift
  LINT="${LINT_EXTRA}"
  WATCH=0
  FIX="${LINT_FIX}"
  ;;
"watch-lint-extra-fix" | "wlef")
  shift
  LINT="${LINT_EXTRA}"
  WATCH=1
  FIX="${LINT_FIX}"
  ;;
"lint-crazy-fix" | "lcf")
  shift
  LINT="${LINT_CRAZY}"
  WATCH=0
  FIX="${LINT_FIX}"
  ;;
"watch-lint-crazy-fix" | "wlcf")
  shift
  LINT="${LINT_CRAZY}"
  WATCH=1
  FIX="${LINT_FIX}"
  ;;
"exec" | "e")
  shift
  RUN=0
  EXEC=1
  ;;
esac

DOCKER_TARGET="dev"
DOCKER_TAG="latest"
RUST_TARGET=""
if [ -n "${CROSS:-}" ]; then
  DOCKER_TARGET="cross-${CROSS}"
  DOCKER_TAG="cross-${CROSS}"
  RUST_TARGET="--target=${CROSS}"
fi

DOCKER_BUILD_ARGS=""
if [[ "${CROSS:-}" == *-apple-darwin ]]; then
  MACOS_SDK_FILENAME=MacOSX11.1.sdk.tar.xz
  MACOS_SDK_SHA=4a575e099c1b5dafe2835770d2a225c4ed082c2a36ecec9eac0946339fe665f3
  DOCKER_BUILD_ARGS=" \
    --build-arg MACOS_SDK_FILENAME=${MACOS_SDK_FILENAME} \
    --build-arg MACOS_SDK_SHA=${MACOS_SDK_SHA} \
  "
fi

docker build -q -t "${DOCKER_IMAGE_NAME}:${DOCKER_TAG}" \
  -f "${PACKAGE_DIR}/docker-dev.dockerfile" \
  --target=${DOCKER_TARGET} \
  --build-arg="UID=$(id -u)" \
  --build-arg="GID=$(id -g)" \
  --build-arg="USER=user" \
  --build-arg="GROUP=user" \
  ${DOCKER_BUILD_ARGS} \
  "${PACKAGE_DIR}" \
  >/dev/null

PARAMS="$(echo "${@:-}" | xargs)"
if [ ! -z "${PARAMS}" ]; then
  PARAMS="--bin=${PARAMS}"
fi

export RUSTC_FORCE_INCREMENTAL=""
if [ -n "${RELEASE}" ]; then
  export RUSTC_FORCE_INCREMENTAL=1
fi

COMMAND=${*:-}
PORTS=
if [ "${RUN}" == "1" ]; then
  COMMAND="cargo run -q --target-dir='${BUILD_DIR_REL}' ${RUST_TARGET} ${RELEASE} ${PARAMS}"
elif [ "${BUILD}" == "1" ]; then
  COMMAND="cargo build -q --target-dir='${BUILD_DIR_REL}' ${RUST_TARGET} ${RELEASE} ${PARAMS}"
elif [ "${WASM}" == "1" ]; then
  COMMAND="bash -c \"set -euo pipefail && cd packages_rs/nextclade-web && yarn wasm-${RELEASE}\""
elif [ "${WEB}" == "1" ]; then
  PORTS="-p 3000:3000"
  COMMAND="bash -c \"set -euo pipefail && cd packages_rs/nextclade-web && yarn install && yarn ${RELEASE}\""
elif [ "${TEST}" == "1" ]; then
  PRETTY_TEST="( grep --color=always --line-buffered -vP \"running.*tests|\x1b\[32m.\x1b\(B\x1b\[m|^$|test result|TEST START\" || true )"
  COMMAND="cargo test --color=always -q --target-dir='${BUILD_DIR_REL}' ${RUST_TARGET} ${@:-} -- --nocapture --color=always | ${PRETTY_TEST} ${SUCCESS_OR_FAILURE}"
elif [ ! -z "${LINT}" ]; then
  COMMAND="cargo clippy --exclude=3rdparty -q --target-dir=\"${BUILD_DIR_REL}\" --all ${FIX:-} -- ${LINT} ${LINT_ALLOW}"
else
  COMMAND="${NICE} ${TIME} ${COMMAND}"
fi

if [ "${WATCH}" == "1" ]; then
  COMMAND="${NICE} watchexec \
    --restart \
    --shell=bash \
    --debounce=10 \
    --no-meta \
    --no-environment \
    --exts=${EXTENSIONS_TO_WATCH} \
    ${FILES_TO_WATCH} \
    ${FILES_TO_IGNORE} \
    'reset; ${NICE} ${TIME} ${COMMAND}'"
else
  COMMAND="${NICE} ${TIME} ${COMMAND}"
fi

CPUS="$(($(nproc) - 2))"

mkdir -p ${BUILD_DIR} ${CACHE_DIR}/.cargo/{install,registry}

DOCKER_PS_RESULT=$(docker ps -f "name=${DOCKER_CONTAINER_NAME}" --format '{{.Names}}')
if [ "${RUN}" != "1" ] && [ "${DOCKER_PS_RESULT}" == "${DOCKER_CONTAINER_NAME}" ]; then
  # If already running, exec a command in the existing instance
  docker exec -it \
    --user="$(id -u):$(id -g)" \
    --workdir="/workdir/${PACKAGE_DIR_REL}" \
    --env="UID=$(id -u)" \
    --env="GID=$(id -g)" \
    --env="USER=${USER}" \
    --env="GROUP=${GROUP}" \
    --env="PS1=\${USER}@\${HOST}" \
    --env="RUST_BACKTRACE=${RUST_BACKTRACE}" \
    --env="COLORBT_SHOW_HIDDEN=${COLORBT_SHOW_HIDDEN}" \
    --env="RUST_LOG=${RUST_LOG}" \
    --env="CARGO_BUILD_TARGET_DIR=${CARGO_BUILD_TARGET_DIR}" \
    --env="RUSTC_FORCE_INCREMENTAL=${RUSTC_FORCE_INCREMENTAL}" \
    ${PORTS} \
    --cpus="${CPUS}" \
    ${DOCKER_CONTAINER_NAME} \
    bash -c "set -euo pipefail; ${HANDLE_SIGINT}; ${NICE} ${TIME} ${COMMAND} ${SUCCESS_OR_FAILURE}"
else
  # If not already running, run
  docker run -it --rm \
    --init \
    --name="${DOCKER_CONTAINER_NAME}" \
    --hostname="${DOCKER_IMAGE_NAME}" \
    --user="$(id -u):$(id -g)" \
    --volume="${PROJECT_ROOT_DIR}:/workdir" \
    --volume="${CACHE_DIR}/.cargo/install:/home/${USER}/.cargo/install" \
    --volume="${CACHE_DIR}/.cargo/registry:/home/${USER}/.cargo/registry" \
    --workdir="/workdir/${PACKAGE_DIR_REL}" \
    --env="UID=$(id -u)" \
    --env="GID=$(id -g)" \
    --env="USER=${USER}" \
    --env="GROUP=${GROUP}" \
    --env="PS1=\${USER}@\${HOST}" \
    --env="RUST_BACKTRACE=${RUST_BACKTRACE}" \
    --env="COLORBT_SHOW_HIDDEN=${COLORBT_SHOW_HIDDEN}" \
    --env="RUST_LOG=${RUST_LOG}" \
    --env="CARGO_BUILD_TARGET_DIR=${CARGO_BUILD_TARGET_DIR}" \
    --env="RUSTC_FORCE_INCREMENTAL=${RUSTC_FORCE_INCREMENTAL}" \
    ${PORTS} \
    --cpus="${CPUS}" \
    "${DOCKER_IMAGE_NAME}:${DOCKER_TAG}" \
    bash -c "set -euo pipefail; ${HANDLE_SIGINT}; ${COMMAND} ${SUCCESS_OR_FAILURE}"
fi
